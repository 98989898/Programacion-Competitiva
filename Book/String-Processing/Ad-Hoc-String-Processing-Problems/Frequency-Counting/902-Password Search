
//ACCEPTED BY UVA

import java.io.*;
import java.util.*;
import java.math.*;

//ACCEPTED BY UVA AS IS, uses a linear scan O(n), then sorting O(nlogn), then linearscan O(n)
//O(n+nlogn+n) = O(nlogn)

class Main {
	static int ciferlen;
	static int k;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		String line = br.readLine();
		while (line!=null&&!line.isEmpty()) {
			String[] split  = line.split(" ");
			k = Integer.parseInt(split[0]);
			String cifertext = "";
			if (split.length>1) {
			 	cifertext = split[1];

			}else {
				cifertext = br.readLine();
			}
			ciferlen = cifertext.length();
			
			ArrayList<String> patterns = new ArrayList<String>();
			for (int i = 0 ; i + k <= ciferlen;i++) {
				String curr = cifertext.substring(i,i+k);
				patterns.add(curr);
			}
			Collections.sort(patterns);
						int size = patterns.size();
				String password = "";
			if (size==1) {
				password = patterns.get(0);

			}
			 			int max = -1;
			
			int counter = 1;
			String curr = "";
			if (size>=1) {
				curr = patterns.get(0);
			}
			
			for (int i = 1 ; i < size ; i++) {
				if (patterns.get(i).equals(curr)) {
					counter++;
				} else {
					if (counter>max) {
						max = counter;
						password = curr;
					}
					counter = 1;
					curr = patterns.get(i);
				}
			}
			if (counter>max) {
				password = curr;
			}
			
			pr.println(password);

			line = br.readLine();
		}

		pr.close();
	}

}


//V1, tried unsuccesfully to use KMP and naiveMatching. Both O(n^2)/O(m*n^2)
import java.io.*;
import java.util.*;
import java.math.*;

class Main {
	static boolean[] invalidindices;
	static int ciferlen;
	static int k;
	static char[] cifer;
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		String line = br.readLine();
		while (line!=null&&!line.isEmpty()) {
			String[] split  = line.split(" ");
			k = Integer.parseInt(split[0]);
			String cifertext = "";
			if (split.length>1) {
			 	cifertext = split[1];

			}else {
				cifertext = br.readLine();
			}
			int password = 0;
			int max = -1;
			invalidindices = new boolean[cifertext.length()];
			ciferlen = cifertext.length();
			cifer = cifertext.toCharArray();
			for (int i = 0 ; i+k<=ciferlen ; i++) {
				if (!invalidindices[i]) {
				//int currint = naiveMatching(i+1);
				int currint = searchSubString(i+1);
				if (currint>max) {
					password = i;
					max = currint;
				}}
			}
			
						
			pr.println(cifertext.substring(password,password+k));

			line = br.readLine();
		}

		pr.close();
	}
	static int naiveMatching(int start) {
		int index = 0;
		
		int n = ciferlen;
		int m = k;
		
		for (int i = start; i < n; i++) { // try all potential starting indices
		if (!invalidindices[i]) {
			Boolean found = true;
			for (int j = 0; j < m && found; j++) // use boolean flag `found'
				if (i + j >= n || cifer[start+j-1] != cifer[i + j]) // if mismatch found
					found = false; // abort this, shift starting index i by +1
				if (found){ // if P[0 .. m - 1] == T[i .. i + m - 1]
					index ++;
					invalidindices[i] = true;
				}}
			}
		return index;
	}
	static int[] preProcessPattern( int start) {
		        int i = 0, j = -1;
		        int[] b = new int[k + 1];
		 
		        b[i] = j;
		        while (i < k) {
		            while (j >= 0 && cifer[start+i-1] != cifer[start+j-1]) {
		                // if there is mismatch consider next widest border
		                j = b[j];
		            }
		            i++;
		            j++;
		            b[i] = j;
		        }

		        return b;
		    }
		    static int searchSubString(int start) {
		    	int ans=0;
		        int i = start, j = 0;
		        // pattern and text lengths
		 
		        // initialize new array and preprocess the pattern
		        int[] b = preProcessPattern(start);
		 
		        while (i < ciferlen) {
		            while (j >= 0 && cifer[i] != cifer[start+j-1]) {
		               /* System.out.println("Mismatch happened, between text char "
		                        + text[i] + " and pattern char " + ptrn[j]
		                        + ", \nhence jumping the value of " + "j from " + j
		                        + " to " + b[j] + " at text index i at " + i
		                        + " based on partial match table");*/
		                j = b[j];
		            }
		            i++;
		            j++;
		 
		            // a match is found
		            if (j == k) {
		                ans++;
						invalidindices[i-k] = true;
		            	/*System.out.println("FOUND SUBSTRING AT i " + i + " and index:"
		                        + (i - ptrnLen));
		                System.out.println("Setting j from " + j + " to " + b[j]);*/
		                j = b[j];
		            }
		        }
		        return ans;
		    }

}
